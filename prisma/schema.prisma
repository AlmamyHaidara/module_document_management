generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Clients {
  id         Int        @id @default(autoincrement())
  nom        String     @db.VarChar(100)
  prenom     String     @db.VarChar(100)
  adresse    String     @db.VarChar(255)
  telephone  String     @db.VarChar(20)
  profession String     @db.VarChar(100)
  nature     NatureEnum

  comptes CompteClients[] @relation("ClientComptes")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([nom(50), prenom(50)])
}

model CompteClients {
  id                Int            @id @default(autoincrement())
  matricule         String         @unique @db.VarChar(50)
  numero_compte     String         @unique @db.VarChar(20)
  type_compte       String         @db.VarChar(50)
  date_ouverture    DateTime
  agence            String         @db.VarChar(100)
  code_gestionnaire String         @db.VarChar(20)
  client_id         Int
  type_document_id  Int
  client            Clients        @relation(fields: [client_id], references: [id], onDelete: Cascade, name: "ClientComptes")
  type_document     TypesDocuments @relation(fields: [type_document_id], references: [id], onDelete: Cascade, name: "DocumentComptes")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([client_id, numero_compte])
}

model TypesDocuments {
  id       Int    @id @default(autoincrement())
  code     String @unique @db.VarChar(50)
  nom_type String @db.VarChar(100)

  metadonnees MetaDonnees[] @relation("TypesDocumentsMetaDonnees")

  dossiers Dossiers[]
  comptes  CompteClients[] @relation("DocumentComptes")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Dossiers                    Dossiers[]                    @relation(name: "TypeDocumentDossiers")

  @@index([code, nom_type])
}

model DossierInfo{
  id Int @id @default(autoincrement())
  cle String
  value String
  dossiers Dossiers[] @relation("DossierInfos")


}
model Dossiers {
  id               Int    @id @default(autoincrement())
  code             String @unique  @db.VarChar(50)
  nom              String
  description      String @db.VarChar(255)
  type_document_id Int
  piece_id         Int
  dossier_info_id Int

  typeDocument TypesDocuments @relation(fields: [type_document_id], references: [id], onDelete: Cascade, name: "TypeDocumentDossiers")
  piece        Piece          @relation(fields: [piece_id], references: [id], onDelete: Cascade, name: "PieceDossiers")
  dossierInfos DossierInfo  @relation(fields: [dossier_info_id], references: [id],name: "DossierInfos")

  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  TypesDocuments TypesDocuments[]

  @@index([type_document_id, piece_id])
}
model Piece {
  id            Int      @id @default(autoincrement())
  code          String   @unique @db.VarChar(50)
  nom           String?   @db.VarChar(100)
  path          String   @db.VarChar(254)
  date_creation DateTime? @default(now())

  dossiers Dossiers[] @relation("PieceDossiers")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([code])
  @@index([date_creation])
}

model MetaDonnees {
  id     Int    @id @default(autoincrement())
  cle    String @db.VarChar(50)
  valeur String @db.Text
  typesDocID Int?

  typeDocument TypesDocuments? @relation(fields: [typesDocID], references: [id], onDelete: Cascade, name: "TypesDocumentsMetaDonnees")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([cle(20)])
}




enum NatureEnum {
  Physique
  Morale
}
